{"name":"Aura","tagline":"Aura is a UI framework for developing dynamic web apps for mobile and desktop devices, while providing a scalable long-lived lifecycle to support building apps engineered for growth. It supports partitioned multi-tier component development that bridges the client and server.","body":"## What is Aura?\r\n\r\nAura is a UI framework for developing dynamic web apps for mobile and desktop \r\ndevices, while providing a scalable long-lived lifecycle to support building apps\r\nengineered for growth. It supports partitioned multi-tier component development \r\nthat bridges the client and server.\r\n \r\nTo find out more about Aura, see the instructions at the end of this README for \r\naccessing the documentation on your localhost after you build the project. \r\n\r\n## How Do I Develop with Aura?\r\n\r\nYou can build your user interface at a granular level and easily integrate with\r\npopular toolkits and libraries, such as jQuery. Aura's lightweight and scalable \r\narchitecture uses two key building blocks: components and events.\r\n \r\nComponents use markup that looks similar to HTML. You can also use HTML or any other code that can\r\nexecute within an HTML page. Components are encapsulated and their internals stay \r\nprivate. You can extend existing components to customize their behavior. \r\n   \r\nThe robust event model enables you to develop loosely coupled components. Once \r\nyou define the events that interact with your components, your team can work on \r\nthe components in parallel to quickly build a powerful app.\r\n\r\nAura also supports a powerful expression language, embedded testing, performance, and security features.\r\n\r\n## How Do I Start?\r\n\r\nThe easiest way to get up and running is from the command line, but you can easily use Aura\r\nwith your favorite IDE too.\r\n\r\n### Prerequisites\r\n\r\nYou need:\r\n\r\n* Java Development Kit (JDK) 1.6\r\n* Apache Maven 3\r\n\r\n### Step 1: Generate a Template from the Aura Archetype\r\n\r\n1. Open a command line window.\r\n2. Navigate to the directory where you want to create your project template and run:\r\n\r\n    `mvn archetype:generate -DarchetypeCatalog=http://repo.auraframework.org/libs-release-local/archetype-catalog.xml`\r\n       \r\n3. When prompted to choose an archetype, enter `1`.\r\n4. Select the latest archetype version, or press enter for the default version.\r\n       The archetype is downloaded to your machine.\r\n5. Enter these values:\r\n<pre><code>\r\n    Define value for property 'groupId': org.myGroup\r\n    Define value for property 'artifactId': helloWorld\r\n    Define value for property 'version': 1.0-SNAPSHOT\r\n    Define value for property 'package': org.myGroup\r\n</code></pre>\r\n    **Note**: The artifactId can only contain alphanumeric characters.\r\n6. When prompted to confirm properties configuration, enter `Y`.\r\nThe following output confirms that your template has been generated successfully.\r\n<pre><code>\r\n    [INFO] ----------------------------------------------------------------------------\r\n    [INFO] Using following parameters for creating project from Archetype: aura-archetype:0.0.1-SNAPSHOT\r\n    [INFO] ----------------------------------------------------------------------------\r\n    [INFO] Parameter: groupId, Value: org.myGroup\r\n    [INFO] Parameter: artifactId, Value: helloWorld\r\n    [INFO] Parameter: version, Value: 1.0-SNAPSHOT\r\n    [INFO] Parameter: package, Value: org.myGroup\r\n    [INFO] Parameter: packageInPathFormat, Value: org.myGroup\r\n    [INFO] Parameter: package, Value: org.myGroup\r\n    [INFO] Parameter: version, Value: 1.0-SNAPSHOT\r\n    [INFO] Parameter: groupId, Value: org.myGroup\r\n    [INFO] Parameter: artifactId, Value: foo\r\n    [INFO] project created from Archetype in dir: /home/<project-path>\r\n    [INFO] ------------------------------------------------------------------------\r\n    [INFO] BUILD SUCCESS\r\n    [INFO] ------------------------------------------------------------------------\r\n    [INFO] Total time: 33.656s\r\n    [INFO] Finished at: Tue Jul 16 14:39:07 PST 2013\r\n    [INFO] Final Memory: 10M/180M\r\n    [INFO] ------------------------------------------------------------------------\r\n</code></pre>\r\n\r\n### Step 2: Build and Run Your Project\r\n   \r\n1. On the command line, navigate to the directory for your new app.\r\n\r\n    `cd helloWorld` \r\n    \r\n2. For just a bit you'll need to edit the pom.xml file in the current directory, find the <repositories> section and add this to it - and yes we're working on fixing this right now:\r\n\r\n<pre><code>\r\n    &lt;repository>\r\n        &lt;id>libs-external&lt;/id>\r\n        &lt;url>http://repo.auraframework.org/libs-release&lt;/url>\r\n    &lt;/repository>    \r\n</code></pre>\r\n\r\n3. Start the Jetty server on port 8080.\r\n\r\n    `mvn jetty:run`\r\n    \r\n    To use another port, append: `-Djetty.port=portNumber. For example, mvn jetty:run -Djetty.port=9877`.\r\n4. Test your app in a browser.\r\n       `http://localhost:8080/helloWorld/helloWorld.app`       \r\nYou should see a simple greeting in your browser.\r\n5. To stop the Jetty server and free up the port when you are finished, press `CTRL+C` on the command line.\r\n    \r\n    **Note**: the helloWorld/pom.xml file has a `<dependencies>` section, which lists the `<version>` of each Aura \r\nartifact in your project. They define the version of Aura that your project is using and each artifact \r\n<dependency> should use the same version.\r\n\r\nTo find out more about Aura, start up your Jetty server and type `http://localhost:9090/auradocs` into your browser\r\nto access the documentation.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}